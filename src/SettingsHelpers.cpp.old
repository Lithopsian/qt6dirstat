/*
 *   File name: SettingsHelpers.cpp
 *   Summary:   Helper functions for QSettings for QDirStat
 *   License:   GPL V2 - See file LICENSE for details.
 *
 *   Authors:   Stefan Hundhammer <Stefan.Hundhammer@gmx.de>
 *              Ian Nartowicz
 */

#include <QWidget>

#include "SettingsHelpers.h"
#include "Settings.h"
#include "Logger.h"


namespace QDirStat
{
    QColor readColorEntry( QSettings     & settings,
                           const QString & key,
                           const QColor  & fallback )
    {
	const QColor color( settings.value( key ).toString() );
	if ( color.isValid() )
	    return color;

	//logDebug() << "Using fallback for " << key << ": " << fallback.name() << Qt::endl;

	return fallback;
    }


    void writeColorEntry( QSettings     & settings,
                          const QString & key,
                          const QColor  & color )
    {
	settings.setValue( key, color.name() );
    }


    ColorList readColorListEntry( const QSettings & settings,
                                  const QString   & key,
                                  const ColorList & fallback )
    {
	ColorList valueList;

	const QStringList colorList = settings.value( key ).toStringList();
	for ( const QString & rgb : colorList )
	{
	    const QColor color( rgb );

	    if ( color.isValid() )
		valueList << color;
	    else
		logError() << "ERROR in " << key << ": \"" << rgb << "\" not a valid color" << Qt::endl;
	}

	return colorList.isEmpty() ? fallback : valueList;
    }


    void writeColorListEntry( QSettings       & settings,
                              const QString   & key,
                              const ColorList & colors )
    {
	QStringList valueList;

	for ( const QColor & color : colors )
	    valueList << color.name();

	settings.setValue( key, valueList );
    }


    QFont readFontEntry( QSettings     & settings,
                         const QString & key,
                         const QFont   & fallback )
    {
	if ( settings.contains( key ) )
	{
	    const QString fontName = settings.value( key ).toString();
	    QFont font;

	    if ( font.fromString( fontName ) )
		return font;
	}

	//logDebug() << "Using fallback for " << key << ": " << fallback.family() << Qt::endl;

	return fallback;
    }

/*
    void writeFontEntry( QSettings     & settings,
                         const QString & key,
                         const QFont   & font )
    {
	settings.setValue( key, font.toString() );
    }
*/


    int readEnumEntry( const QSettings           & settings,
                       const QString             & key,
                       int                         fallback,
                       const SettingsEnumMapping & enumMapping )
    {
	if ( !settings.contains( key ) )
	    return fallback;

	const QString str = settings.value( key ).toString();
	const int enumKey = enumMapping.key( str, -1 );
	if ( enumKey >= 0 )
	    return enumKey;

	logError() << "Invalid value for " << key << ": \"" << str << "\"" << Qt::endl;

	return fallback;
    }


    void writeEnumEntry( QSettings                 & settings,
                         const QString             & key,
                         int                         enumValue,
                         const SettingsEnumMapping & enumMapping )
    {
	if ( !enumMapping.contains( enumValue ) )
	{
	    logError() << "No string for enum value " << enumValue << Qt::endl;
	    return;
	}

	settings.setValue( key, enumMapping.value( enumValue ) );
    }


    void readWindowSettings( QWidget * widget, const QString & settingsGroup )
    {
	QDirStat::Settings settings;

	settings.beginGroup( settingsGroup );
	const QPoint winPos  = settings.value( "WindowPos" , QPoint( -99, -99 ) ).toPoint();
	const QSize  winSize = settings.value( "WindowSize", QSize (   0,   0 ) ).toSize();
	settings.endGroup();

	if ( winSize.height() > 100 && winSize.width() > 100 )
	    widget->resize( winSize );

	if ( winPos.x() != -99 && winPos.y() != -99 )
	    widget->move( winPos );
    }


    void writeWindowSettings( QWidget * widget, const QString & settingsGroup )
    {
	QDirStat::Settings settings;

	settings.beginGroup( settingsGroup );
	settings.setValue( "WindowPos" , widget->pos()  );
	settings.setValue( "WindowSize", widget->size() );
	settings.endGroup();
    }

} // namespace QDirStat

